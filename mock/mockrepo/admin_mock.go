// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaceRepository/admin.go

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	entity "project/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAdminRepository) Create(arg0 *entity.Admin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAdminRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdminRepository)(nil).Create), arg0)
}

// CreateOtpKey mocks base method.
func (m *MockAdminRepository) CreateOtpKey(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtpKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOtpKey indicates an expected call of CreateOtpKey.
func (mr *MockAdminRepositoryMockRecorder) CreateOtpKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtpKey", reflect.TypeOf((*MockAdminRepository)(nil).CreateOtpKey), arg0, arg1)
}

// GetAllUsers mocks base method.
func (m *MockAdminRepository) GetAllUsers(arg0, arg1 int) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockAdminRepositoryMockRecorder) GetAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockAdminRepository)(nil).GetAllUsers), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockAdminRepository) GetByEmail(arg0 string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockAdminRepositoryMockRecorder) GetByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockAdminRepository)(nil).GetByEmail), arg0)
}

// GetById mocks base method.
func (m *MockAdminRepository) GetById(arg0 int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAdminRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAdminRepository)(nil).GetById), arg0)
}

// GetByPhone mocks base method.
func (m *MockAdminRepository) GetByPhone(arg0 string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", arg0)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhone indicates an expected call of GetByPhone.
func (mr *MockAdminRepositoryMockRecorder) GetByPhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockAdminRepository)(nil).GetByPhone), arg0)
}

// GetOrderByStatus mocks base method.
func (m *MockAdminRepository) GetOrderByStatus() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByStatus")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderByStatus indicates an expected call of GetOrderByStatus.
func (mr *MockAdminRepositoryMockRecorder) GetOrderByStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByStatus", reflect.TypeOf((*MockAdminRepository)(nil).GetOrderByStatus))
}

// GetOrders mocks base method.
func (m *MockAdminRepository) GetOrders() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockAdminRepositoryMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockAdminRepository)(nil).GetOrders))
}

// GetProducts mocks base method.
func (m *MockAdminRepository) GetProducts() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockAdminRepositoryMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockAdminRepository)(nil).GetProducts))
}

// GetRevenue mocks base method.
func (m *MockAdminRepository) GetRevenue() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevenue")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevenue indicates an expected call of GetRevenue.
func (mr *MockAdminRepositoryMockRecorder) GetRevenue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevenue", reflect.TypeOf((*MockAdminRepository)(nil).GetRevenue))
}

// GetUsers mocks base method.
func (m *MockAdminRepository) GetUsers() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAdminRepositoryMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAdminRepository)(nil).GetUsers))
}

// GetUsersBySearch mocks base method.
func (m *MockAdminRepository) GetUsersBySearch(arg0, arg1 int, arg2 string) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersBySearch", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersBySearch indicates an expected call of GetUsersBySearch.
func (mr *MockAdminRepositoryMockRecorder) GetUsersBySearch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersBySearch", reflect.TypeOf((*MockAdminRepository)(nil).GetUsersBySearch), arg0, arg1, arg2)
}

// GetstocklessProducts mocks base method.
func (m *MockAdminRepository) GetstocklessProducts() (*[]entity.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetstocklessProducts")
	ret0, _ := ret[0].(*[]entity.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetstocklessProducts indicates an expected call of GetstocklessProducts.
func (mr *MockAdminRepositoryMockRecorder) GetstocklessProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetstocklessProducts", reflect.TypeOf((*MockAdminRepository)(nil).GetstocklessProducts))
}

// Update mocks base method.
func (m *MockAdminRepository) Update(arg0 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAdminRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAdminRepository)(nil).Update), arg0)
}
