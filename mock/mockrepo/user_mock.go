// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaceRepository/user.go

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	models "project/delivery/models"
	entity "project/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockUserRepository) CheckPermission(arg0 *entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockUserRepositoryMockRecorder) CheckPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockUserRepository)(nil).CheckPermission), arg0)
}

// Create mocks base method.
func (m *MockUserRepository) Create(arg0 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), arg0)
}

// CreateAddress mocks base method.
func (m *MockUserRepository) CreateAddress(arg0 *entity.UserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockUserRepositoryMockRecorder) CreateAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockUserRepository)(nil).CreateAddress), arg0)
}

// CreateOtpKey mocks base method.
func (m *MockUserRepository) CreateOtpKey(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtpKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOtpKey indicates an expected call of CreateOtpKey.
func (mr *MockUserRepositoryMockRecorder) CreateOtpKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtpKey", reflect.TypeOf((*MockUserRepository)(nil).CreateOtpKey), arg0, arg1)
}

// CreateSignup mocks base method.
func (m *MockUserRepository) CreateSignup(arg0 *models.Signup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSignup indicates an expected call of CreateSignup.
func (mr *MockUserRepositoryMockRecorder) CreateSignup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignup", reflect.TypeOf((*MockUserRepository)(nil).CreateSignup), arg0)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(arg0 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), arg0)
}

// DeleteAddress mocks base method.
func (m *MockUserRepository) DeleteAddress(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserRepositoryMockRecorder) DeleteAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserRepository)(nil).DeleteAddress), arg0)
}

// GetAddressByID mocks base method.
func (m *MockUserRepository) GetAddressByID(arg0 int) (*entity.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByID", arg0)
	ret0, _ := ret[0].(*entity.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByID indicates an expected call of GetAddressByID.
func (mr *MockUserRepositoryMockRecorder) GetAddressByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByID", reflect.TypeOf((*MockUserRepository)(nil).GetAddressByID), arg0)
}

// GetAddressById mocks base method.
func (m *MockUserRepository) GetAddressById(arg0 int) (*entity.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressById", arg0)
	ret0, _ := ret[0].(*entity.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressById indicates an expected call of GetAddressById.
func (mr *MockUserRepositoryMockRecorder) GetAddressById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressById", reflect.TypeOf((*MockUserRepository)(nil).GetAddressById), arg0)
}

// GetAddressByType mocks base method.
func (m *MockUserRepository) GetAddressByType(arg0 int, arg1 string) (*entity.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByType", arg0, arg1)
	ret0, _ := ret[0].(*entity.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByType indicates an expected call of GetAddressByType.
func (mr *MockUserRepositoryMockRecorder) GetAddressByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByType", reflect.TypeOf((*MockUserRepository)(nil).GetAddressByType), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(arg0 string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), arg0)
}

// GetById mocks base method.
func (m *MockUserRepository) GetById(arg0 int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepository)(nil).GetById), arg0)
}

// GetByKey mocks base method.
func (m *MockUserRepository) GetByKey(arg0 string) (*entity.OtpKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", arg0)
	ret0, _ := ret[0].(*entity.OtpKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockUserRepositoryMockRecorder) GetByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockUserRepository)(nil).GetByKey), arg0)
}

// GetByPhone mocks base method.
func (m *MockUserRepository) GetByPhone(arg0 string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", arg0)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhone indicates an expected call of GetByPhone.
func (mr *MockUserRepositoryMockRecorder) GetByPhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockUserRepository)(nil).GetByPhone), arg0)
}

// GetByReferalCode mocks base method.
func (m *MockUserRepository) GetByReferalCode(arg0 string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferalCode", arg0)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferalCode indicates an expected call of GetByReferalCode.
func (mr *MockUserRepositoryMockRecorder) GetByReferalCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferalCode", reflect.TypeOf((*MockUserRepository)(nil).GetByReferalCode), arg0)
}

// GetSignupByPhone mocks base method.
func (m *MockUserRepository) GetSignupByPhone(arg0 string) (*models.Signup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignupByPhone", arg0)
	ret0, _ := ret[0].(*models.Signup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignupByPhone indicates an expected call of GetSignupByPhone.
func (mr *MockUserRepositoryMockRecorder) GetSignupByPhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignupByPhone", reflect.TypeOf((*MockUserRepository)(nil).GetSignupByPhone), arg0)
}

// Update mocks base method.
func (m *MockUserRepository) Update(arg0 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), arg0)
}

// UpdateAddress mocks base method.
func (m *MockUserRepository) UpdateAddress(arg0 *entity.UserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserRepositoryMockRecorder) UpdateAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserRepository)(nil).UpdateAddress), arg0)
}
