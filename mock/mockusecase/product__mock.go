// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/interfaceUseCase/product.go

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	multipart "mime/multipart"
	models "project/delivery/models"
	entity "project/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockProductUseCase is a mock of ProductUseCase interface.
type MockProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUseCaseMockRecorder
}

// MockProductUseCaseMockRecorder is the mock recorder for MockProductUseCase.
type MockProductUseCaseMockRecorder struct {
	mock *MockProductUseCase
}

// NewMockProductUseCase creates a new mock instance.
func NewMockProductUseCase(ctrl *gomock.Controller) *MockProductUseCase {
	mock := &MockProductUseCase{ctrl: ctrl}
	mock.recorder = &MockProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUseCase) EXPECT() *MockProductUseCaseMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockProductUseCase) BeginTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockProductUseCaseMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockProductUseCase)(nil).BeginTransaction))
}

// ExecuteAddCoupon mocks base method.
func (m *MockProductUseCase) ExecuteAddCoupon(arg0 *entity.Coupon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddCoupon", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAddCoupon indicates an expected call of ExecuteAddCoupon.
func (mr *MockProductUseCaseMockRecorder) ExecuteAddCoupon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddCoupon", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteAddCoupon), arg0)
}

// ExecuteAddOffer mocks base method.
func (m *MockProductUseCase) ExecuteAddOffer(arg0 *entity.Offer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddOffer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAddOffer indicates an expected call of ExecuteAddOffer.
func (mr *MockProductUseCaseMockRecorder) ExecuteAddOffer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddOffer", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteAddOffer), arg0)
}

// ExecuteAddProductOffer mocks base method.
func (m *MockProductUseCase) ExecuteAddProductOffer(arg0, arg1 int) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddProductOffer", arg0, arg1)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddProductOffer indicates an expected call of ExecuteAddProductOffer.
func (mr *MockProductUseCaseMockRecorder) ExecuteAddProductOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddProductOffer", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteAddProductOffer), arg0, arg1)
}

// ExecuteAddStock mocks base method.
func (m *MockProductUseCase) ExecuteAddStock(arg0, arg1 int) (*entity.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddStock", arg0, arg1)
	ret0, _ := ret[0].(*entity.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAddStock indicates an expected call of ExecuteAddStock.
func (mr *MockProductUseCaseMockRecorder) ExecuteAddStock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddStock", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteAddStock), arg0, arg1)
}

// ExecuteAvailableCoupons mocks base method.
func (m *MockProductUseCase) ExecuteAvailableCoupons() (*[]entity.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAvailableCoupons")
	ret0, _ := ret[0].(*[]entity.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAvailableCoupons indicates an expected call of ExecuteAvailableCoupons.
func (mr *MockProductUseCaseMockRecorder) ExecuteAvailableCoupons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAvailableCoupons", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteAvailableCoupons))
}

// ExecuteCategoryOffer mocks base method.
func (m *MockProductUseCase) ExecuteCategoryOffer(arg0, arg1 int) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCategoryOffer", arg0, arg1)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCategoryOffer indicates an expected call of ExecuteCategoryOffer.
func (mr *MockProductUseCaseMockRecorder) ExecuteCategoryOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCategoryOffer", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteCategoryOffer), arg0, arg1)
}

// ExecuteCreateCategory mocks base method.
func (m *MockProductUseCase) ExecuteCreateCategory(arg0 entity.Category) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCreateCategory", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCreateCategory indicates an expected call of ExecuteCreateCategory.
func (mr *MockProductUseCaseMockRecorder) ExecuteCreateCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCreateCategory", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteCreateCategory), arg0)
}

// ExecuteCreateInventory mocks base method.
func (m *MockProductUseCase) ExecuteCreateInventory(arg0 entity.Inventory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCreateInventory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteCreateInventory indicates an expected call of ExecuteCreateInventory.
func (mr *MockProductUseCaseMockRecorder) ExecuteCreateInventory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCreateInventory", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteCreateInventory), arg0)
}

// ExecuteCreateProduct mocks base method.
func (m *MockProductUseCase) ExecuteCreateProduct(arg0 entity.Product, arg1 *multipart.FileHeader) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCreateProduct", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCreateProduct indicates an expected call of ExecuteCreateProduct.
func (mr *MockProductUseCaseMockRecorder) ExecuteCreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCreateProduct", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteCreateProduct), arg0, arg1)
}

// ExecuteCreateProductDetails mocks base method.
func (m *MockProductUseCase) ExecuteCreateProductDetails(arg0 entity.ProductDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCreateProductDetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteCreateProductDetails indicates an expected call of ExecuteCreateProductDetails.
func (mr *MockProductUseCaseMockRecorder) ExecuteCreateProductDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCreateProductDetails", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteCreateProductDetails), arg0)
}

// ExecuteDeleteCategory mocks base method.
func (m *MockProductUseCase) ExecuteDeleteCategory(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDeleteCategory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDeleteCategory indicates an expected call of ExecuteDeleteCategory.
func (mr *MockProductUseCaseMockRecorder) ExecuteDeleteCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDeleteCategory", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteDeleteCategory), arg0)
}

// ExecuteDeleteCoupon mocks base method.
func (m *MockProductUseCase) ExecuteDeleteCoupon(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDeleteCoupon", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDeleteCoupon indicates an expected call of ExecuteDeleteCoupon.
func (mr *MockProductUseCaseMockRecorder) ExecuteDeleteCoupon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDeleteCoupon", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteDeleteCoupon), arg0)
}

// ExecuteDeleteProduct mocks base method.
func (m *MockProductUseCase) ExecuteDeleteProduct(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDeleteProduct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDeleteProduct indicates an expected call of ExecuteDeleteProduct.
func (mr *MockProductUseCaseMockRecorder) ExecuteDeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDeleteProduct", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteDeleteProduct), arg0)
}

// ExecuteDeleteProductAdd mocks base method.
func (m *MockProductUseCase) ExecuteDeleteProductAdd(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDeleteProductAdd", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDeleteProductAdd indicates an expected call of ExecuteDeleteProductAdd.
func (mr *MockProductUseCaseMockRecorder) ExecuteDeleteProductAdd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDeleteProductAdd", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteDeleteProductAdd), arg0)
}

// ExecuteEditCategory mocks base method.
func (m *MockProductUseCase) ExecuteEditCategory(arg0 entity.Category, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteEditCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteEditCategory indicates an expected call of ExecuteEditCategory.
func (mr *MockProductUseCaseMockRecorder) ExecuteEditCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteEditCategory", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteEditCategory), arg0, arg1)
}

// ExecuteEditProduct mocks base method.
func (m *MockProductUseCase) ExecuteEditProduct(arg0 entity.Product, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteEditProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteEditProduct indicates an expected call of ExecuteEditProduct.
func (mr *MockProductUseCaseMockRecorder) ExecuteEditProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteEditProduct", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteEditProduct), arg0, arg1)
}

// ExecuteGetAllCategory mocks base method.
func (m *MockProductUseCase) ExecuteGetAllCategory() (*[]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGetAllCategory")
	ret0, _ := ret[0].(*[]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGetAllCategory indicates an expected call of ExecuteGetAllCategory.
func (mr *MockProductUseCaseMockRecorder) ExecuteGetAllCategory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGetAllCategory", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteGetAllCategory))
}

// ExecuteGetCategory mocks base method.
func (m *MockProductUseCase) ExecuteGetCategory(arg0 entity.Category) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGetCategory", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGetCategory indicates an expected call of ExecuteGetCategory.
func (mr *MockProductUseCaseMockRecorder) ExecuteGetCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGetCategory", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteGetCategory), arg0)
}

// ExecuteGetCategoryId mocks base method.
func (m *MockProductUseCase) ExecuteGetCategoryId(arg0 int) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGetCategoryId", arg0)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGetCategoryId indicates an expected call of ExecuteGetCategoryId.
func (mr *MockProductUseCaseMockRecorder) ExecuteGetCategoryId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGetCategoryId", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteGetCategoryId), arg0)
}

// ExecuteGetCouponByCode mocks base method.
func (m *MockProductUseCase) ExecuteGetCouponByCode(arg0 string) (*entity.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGetCouponByCode", arg0)
	ret0, _ := ret[0].(*entity.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGetCouponByCode indicates an expected call of ExecuteGetCouponByCode.
func (mr *MockProductUseCaseMockRecorder) ExecuteGetCouponByCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGetCouponByCode", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteGetCouponByCode), arg0)
}

// ExecuteGetOffers mocks base method.
func (m *MockProductUseCase) ExecuteGetOffers() (*[]entity.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGetOffers")
	ret0, _ := ret[0].(*[]entity.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGetOffers indicates an expected call of ExecuteGetOffers.
func (mr *MockProductUseCaseMockRecorder) ExecuteGetOffers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGetOffers", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteGetOffers))
}

// ExecuteGetProductById mocks base method.
func (m *MockProductUseCase) ExecuteGetProductById(arg0 int) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteGetProductById", arg0)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteGetProductById indicates an expected call of ExecuteGetProductById.
func (mr *MockProductUseCaseMockRecorder) ExecuteGetProductById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteGetProductById", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteGetProductById), arg0)
}

// ExecuteProductByCategory mocks base method.
func (m *MockProductUseCase) ExecuteProductByCategory(arg0, arg1, arg2 int) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteProductByCategory", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteProductByCategory indicates an expected call of ExecuteProductByCategory.
func (mr *MockProductUseCaseMockRecorder) ExecuteProductByCategory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProductByCategory", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteProductByCategory), arg0, arg1, arg2)
}

// ExecuteProductDetails mocks base method.
func (m *MockProductUseCase) ExecuteProductDetails(arg0 int) (*entity.Product, *entity.ProductDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteProductDetails", arg0)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(*entity.ProductDetails)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteProductDetails indicates an expected call of ExecuteProductDetails.
func (mr *MockProductUseCaseMockRecorder) ExecuteProductDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProductDetails", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteProductDetails), arg0)
}

// ExecuteProductFilter mocks base method.
func (m *MockProductUseCase) ExecuteProductFilter(arg0 string, arg1, arg2, arg3 int) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteProductFilter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteProductFilter indicates an expected call of ExecuteProductFilter.
func (mr *MockProductUseCaseMockRecorder) ExecuteProductFilter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProductFilter", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteProductFilter), arg0, arg1, arg2, arg3)
}

// ExecuteProductList mocks base method.
func (m *MockProductUseCase) ExecuteProductList(arg0, arg1 int) ([]models.ProductWithQuantityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteProductList", arg0, arg1)
	ret0, _ := ret[0].([]models.ProductWithQuantityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteProductList indicates an expected call of ExecuteProductList.
func (mr *MockProductUseCaseMockRecorder) ExecuteProductList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProductList", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteProductList), arg0, arg1)
}

// ExecuteProductSearch mocks base method.
func (m *MockProductUseCase) ExecuteProductSearch(arg0, arg1 int, arg2 string) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteProductSearch", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteProductSearch indicates an expected call of ExecuteProductSearch.
func (mr *MockProductUseCaseMockRecorder) ExecuteProductSearch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteProductSearch", reflect.TypeOf((*MockProductUseCase)(nil).ExecuteProductSearch), arg0, arg1, arg2)
}
