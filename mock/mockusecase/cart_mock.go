// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/interfaceUseCase/cart.go

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	entity "project/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartUsecase is a mock of CartUsecase interface.
type MockCartUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCartUsecaseMockRecorder
}

// MockCartUsecaseMockRecorder is the mock recorder for MockCartUsecase.
type MockCartUsecaseMockRecorder struct {
	mock *MockCartUsecase
}

// NewMockCartUsecase creates a new mock instance.
func NewMockCartUsecase(ctrl *gomock.Controller) *MockCartUsecase {
	mock := &MockCartUsecase{ctrl: ctrl}
	mock.recorder = &MockCartUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartUsecase) EXPECT() *MockCartUsecaseMockRecorder {
	return m.recorder
}

// ExecuteAddToCart mocks base method.
func (m *MockCartUsecase) ExecuteAddToCart(arg0, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddToCart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAddToCart indicates an expected call of ExecuteAddToCart.
func (mr *MockCartUsecaseMockRecorder) ExecuteAddToCart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddToCart", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteAddToCart), arg0, arg1, arg2)
}

// ExecuteAddWishlist mocks base method.
func (m *MockCartUsecase) ExecuteAddWishlist(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddWishlist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAddWishlist indicates an expected call of ExecuteAddWishlist.
func (mr *MockCartUsecaseMockRecorder) ExecuteAddWishlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddWishlist", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteAddWishlist), arg0, arg1)
}

// ExecuteApplyCoupon mocks base method.
func (m *MockCartUsecase) ExecuteApplyCoupon(arg0 int, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteApplyCoupon", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteApplyCoupon indicates an expected call of ExecuteApplyCoupon.
func (mr *MockCartUsecaseMockRecorder) ExecuteApplyCoupon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteApplyCoupon", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteApplyCoupon), arg0, arg1)
}

// ExecuteCart mocks base method.
func (m *MockCartUsecase) ExecuteCart(arg0 int) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCart", arg0)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCart indicates an expected call of ExecuteCart.
func (mr *MockCartUsecaseMockRecorder) ExecuteCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCart", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteCart), arg0)
}

// ExecuteCartItems mocks base method.
func (m *MockCartUsecase) ExecuteCartItems(arg0 int) ([]entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCartItems", arg0)
	ret0, _ := ret[0].([]entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCartItems indicates an expected call of ExecuteCartItems.
func (mr *MockCartUsecaseMockRecorder) ExecuteCartItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCartItems", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteCartItems), arg0)
}

// ExecuteCartitem mocks base method.
func (m *MockCartUsecase) ExecuteCartitem(arg0 int) (*[]entity.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCartitem", arg0)
	ret0, _ := ret[0].(*[]entity.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCartitem indicates an expected call of ExecuteCartitem.
func (mr *MockCartUsecaseMockRecorder) ExecuteCartitem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCartitem", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteCartitem), arg0)
}

// ExecuteOfferCheck mocks base method.
func (m *MockCartUsecase) ExecuteOfferCheck(arg0 int) (*[]entity.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOfferCheck", arg0)
	ret0, _ := ret[0].(*[]entity.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteOfferCheck indicates an expected call of ExecuteOfferCheck.
func (mr *MockCartUsecaseMockRecorder) ExecuteOfferCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOfferCheck", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteOfferCheck), arg0)
}

// ExecuteRemoveCartItem mocks base method.
func (m *MockCartUsecase) ExecuteRemoveCartItem(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteRemoveCartItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteRemoveCartItem indicates an expected call of ExecuteRemoveCartItem.
func (mr *MockCartUsecaseMockRecorder) ExecuteRemoveCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRemoveCartItem", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteRemoveCartItem), arg0, arg1)
}

// ExecuteRemoveFromWishList mocks base method.
func (m *MockCartUsecase) ExecuteRemoveFromWishList(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteRemoveFromWishList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteRemoveFromWishList indicates an expected call of ExecuteRemoveFromWishList.
func (mr *MockCartUsecaseMockRecorder) ExecuteRemoveFromWishList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRemoveFromWishList", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteRemoveFromWishList), arg0, arg1)
}

// ExecuteViewWishlist mocks base method.
func (m *MockCartUsecase) ExecuteViewWishlist(arg0 int) ([]entity.WishList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteViewWishlist", arg0)
	ret0, _ := ret[0].([]entity.WishList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteViewWishlist indicates an expected call of ExecuteViewWishlist.
func (mr *MockCartUsecaseMockRecorder) ExecuteViewWishlist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteViewWishlist", reflect.TypeOf((*MockCartUsecase)(nil).ExecuteViewWishlist), arg0)
}
