// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/interfaceUseCase/user.go

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	models "project/delivery/models"
	entity "project/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// CheckAddress mocks base method.
func (m *MockUserUseCase) CheckAddress(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAddress indicates an expected call of CheckAddress.
func (mr *MockUserUseCaseMockRecorder) CheckAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAddress", reflect.TypeOf((*MockUserUseCase)(nil).CheckAddress), arg0, arg1)
}

// ExecuteAddAddress mocks base method.
func (m *MockUserUseCase) ExecuteAddAddress(arg0 *entity.UserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAddAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAddAddress indicates an expected call of ExecuteAddAddress.
func (mr *MockUserUseCaseMockRecorder) ExecuteAddAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAddAddress", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteAddAddress), arg0)
}

// ExecuteChangePassword mocks base method.
func (m *MockUserUseCase) ExecuteChangePassword(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteChangePassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteChangePassword indicates an expected call of ExecuteChangePassword.
func (mr *MockUserUseCaseMockRecorder) ExecuteChangePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteChangePassword", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteChangePassword), arg0)
}

// ExecuteDeleteAddress mocks base method.
func (m *MockUserUseCase) ExecuteDeleteAddress(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDeleteAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDeleteAddress indicates an expected call of ExecuteDeleteAddress.
func (mr *MockUserUseCaseMockRecorder) ExecuteDeleteAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDeleteAddress", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteDeleteAddress), arg0, arg1)
}

// ExecuteEditAddress mocks base method.
func (m *MockUserUseCase) ExecuteEditAddress(arg0 entity.UserAddress, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteEditAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteEditAddress indicates an expected call of ExecuteEditAddress.
func (mr *MockUserUseCaseMockRecorder) ExecuteEditAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteEditAddress", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteEditAddress), arg0, arg1, arg2)
}

// ExecuteEditProfile mocks base method.
func (m *MockUserUseCase) ExecuteEditProfile(arg0 entity.User, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteEditProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteEditProfile indicates an expected call of ExecuteEditProfile.
func (mr *MockUserUseCaseMockRecorder) ExecuteEditProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteEditProfile", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteEditProfile), arg0, arg1)
}

// ExecuteLogin mocks base method.
func (m *MockUserUseCase) ExecuteLogin(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteLogin", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteLogin indicates an expected call of ExecuteLogin.
func (mr *MockUserUseCaseMockRecorder) ExecuteLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteLogin", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteLogin), arg0)
}

// ExecuteLoginWithPassword mocks base method.
func (m *MockUserUseCase) ExecuteLoginWithPassword(arg0, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteLoginWithPassword", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteLoginWithPassword indicates an expected call of ExecuteLoginWithPassword.
func (mr *MockUserUseCaseMockRecorder) ExecuteLoginWithPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteLoginWithPassword", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteLoginWithPassword), arg0, arg1)
}

// ExecuteOtpValidation mocks base method.
func (m *MockUserUseCase) ExecuteOtpValidation(arg0, arg1 string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOtpValidation", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteOtpValidation indicates an expected call of ExecuteOtpValidation.
func (mr *MockUserUseCaseMockRecorder) ExecuteOtpValidation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOtpValidation", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteOtpValidation), arg0, arg1)
}

// ExecuteOtpValidationPassword mocks base method.
func (m *MockUserUseCase) ExecuteOtpValidationPassword(arg0, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOtpValidationPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteOtpValidationPassword indicates an expected call of ExecuteOtpValidationPassword.
func (mr *MockUserUseCaseMockRecorder) ExecuteOtpValidationPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOtpValidationPassword", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteOtpValidationPassword), arg0, arg1, arg2)
}

// ExecuteShowUserDetails mocks base method.
func (m *MockUserUseCase) ExecuteShowUserDetails(arg0 int) (*entity.User, *entity.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteShowUserDetails", arg0)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(*entity.UserAddress)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteShowUserDetails indicates an expected call of ExecuteShowUserDetails.
func (mr *MockUserUseCaseMockRecorder) ExecuteShowUserDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteShowUserDetails", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteShowUserDetails), arg0)
}

// ExecuteSignup mocks base method.
func (m *MockUserUseCase) ExecuteSignup(arg0 entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSignup", arg0)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSignup indicates an expected call of ExecuteSignup.
func (mr *MockUserUseCaseMockRecorder) ExecuteSignup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSignup", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteSignup), arg0)
}

// ExecuteSignupOtpValidation mocks base method.
func (m *MockUserUseCase) ExecuteSignupOtpValidation(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSignupOtpValidation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteSignupOtpValidation indicates an expected call of ExecuteSignupOtpValidation.
func (mr *MockUserUseCaseMockRecorder) ExecuteSignupOtpValidation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSignupOtpValidation", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteSignupOtpValidation), arg0, arg1)
}

// ExecuteSignupWithOtp mocks base method.
func (m *MockUserUseCase) ExecuteSignupWithOtp(arg0 models.Signup) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSignupWithOtp", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSignupWithOtp indicates an expected call of ExecuteSignupWithOtp.
func (mr *MockUserUseCaseMockRecorder) ExecuteSignupWithOtp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSignupWithOtp", reflect.TypeOf((*MockUserUseCase)(nil).ExecuteSignupWithOtp), arg0)
}
